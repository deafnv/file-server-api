[[{"l":"File Server","p":["Basic file server with API routes for CRUD.","Authorization for a single admin api key/password, giving permissions for state-changing interactions like creating new folders, or uploading files. Unauthorized users will still be a able to view and download the files. Authorization Routes","All file paths used in requests are relative to root path in config.yaml, i.e., /server/files/image.jpg not /home/deafnv/server/files/image.jpg.","This file server is used in the demo in this repository."]},{"l":"Usage","p":["Clone, setup config.yaml, and run npm install, npm run build, and npm start. See config-template.yaml for details on the config file format. The server should start by default on port 80, and 443 if configured with HTTPS.","If database is enabled and running for the first time, run npm run migrate to migrate the database schema."]},{"l":"Routes","p":["All routes causing state changes in the server require authorization. See Authorization Routes for details."]}],[{"l":"Configuration"},{"l":"Config File Setup","p":["Make a copy of config-template.yaml and rename it config.yaml, then populate it as you see fit.","If database is enabled and running for the first time, run npm run migrate to migrate the database schema."]},{"l":"Template"}],[{"l":"Miscellaneous"},{"l":"Listening to server updates","p":["The server will broadcast websocket events upon successful execution of any of the state-changing routes, with the event name being the relative path (relative to the root path provided in config.yaml) of the directory affected by the update.","For example, a delete request made on /home/deafnv/server-files/dir-1 will broadcast a /dir-1 event with payload DELETE. Client side re-polling of /list can be done by listening for these events.","Example implementation in Next.js, with Typescript:"]}],[{"l":"List of Routes","p":["Query routes are unauthorized by default (changeable in config.yaml), and state-changing routes (create, update, delete) require authorization."]},{"l":"Query routes","p":["/list: Lists the file in a given directory. Lists root directory if unspecified.","/retrieve: Retrieves file specified. Supports video streaming.","/filetree: Returns a JSON representation of any subdirectories. Only lists directories, files are omitted."]},{"l":"State-changing routes","p":["/upload: Uploads files into directory provided.","/delete: Deletes files specified.","/makedir: Creates a folder in directory specified.","/move: Moves files and/or folders into a given directory.","/copy: Copy files and/or folders into a given directory.","/rename: Renames a file specified."]},{"l":"Authorization routes","p":["/authorize/get: Get JWT from body provided.","/authorize/logout: Delete any token cookie in request."]},{"l":"Advanced Auth","p":["/authorize/login: Advanced version of /authorize/get that doesn't allow API key logins for security. Get and send JWT from user data.","/authorize/register: Get JWT from user data and registers the user.","/authorize/delete: Deletes user data from database, and removes token cookie from client.","/authorize/user: Searches for users matching a query string, or index all if none provided.","/authorize/{\"username\"}/modify: Modify user data of username provide."]}],[{"i":"list","l":"/list"},{"l":"Route Details"},{"i":"get-listdirectory_path","l":"GET /list/{directory_path}","p":["Lists the file in a given directory. Lists root directory if unspecified."]},{"l":"Request","p":["Method: HTTP GET","Path parameter {directory_path}: /path/to/directory"]},{"l":"Response","p":["Status Code","Description","200","Array of variable length, with JSON object for each item in directory. Size in bytes.","401","Unauthorized. Applies if route authorization enabled in config.yaml.","404","Invalid path, directory not found","429","Too Many Requests","500","Internal Server Error","Example 200 response body:"]}],[{"i":"retrieve","l":"/retrieve"},{"l":"Route Details"},{"i":"get-retrievefile_path","l":"GET /retrieve/{file_path}","p":["Retrieves file specified. Supports video streaming."]},{"l":"Request","p":["Method: HTTP GET","Path parameter {file_path}: /path/to/file","Query parameter: optional download=true can be used to directly download the file specified."]},{"l":"Response","p":["Status Code","Description","200","Varies depending on file requested. Specified by Content-Type header.","401","Unauthorized. Applies to authorized files based on config.yaml.","404","Invalid path, file/directory not found","429","Too Many Requests","500","Internal Server Error"]}],[{"i":"filetree","l":"/filetree"},{"l":"Route Details"},{"i":"get-filetree","l":"GET /filetree","p":["Returns a JSON representation of any subdirectories. Only lists directories, files are omitted."]},{"l":"Request","p":["Method: HTTP GET"]},{"l":"Response","p":["Status Code","Description","200","JSON representation of subdirectories.","401","Unauthorized. Applies if route authorization enabled in config.yaml.","429","Too Many Requests","500","Internal Server Error","Example 200 response body:"]}],[{"i":"upload","l":"/upload"},{"l":"Route Details"},{"i":"post-uploaddirectory_path","l":"POST /upload/{directory_path}","p":["Uploads files into directory provided."]},{"l":"Request","p":["Method: HTTP POST","Path parameter {directory_path}: /path/to/directory","Request body: Content-Type: multipart/form-data"]},{"l":"Response","p":["Status Code","Description","200","Success","401","Unauthorized. Requires API key or JWT with permission.","403","Forbidden. User does not have permission.","429","Too Many Requests","500","Internal Server Error"]}],[{"i":"delete","l":"/delete"},{"l":"Route Details"},{"i":"delete-delete","l":"DELETE /delete","p":["Deletes files specified."]},{"l":"Request","p":["Method: HTTP DELETE","Request body: JSON object with pathToFiles, string array of any length with path of files to delete."]},{"l":"Response","p":["Status Code","Description","200","Success","401","Unauthorized. Requires API key or JWT with permission.","403","Forbidden. User does not have permission.","429","Too Many Requests","500","Internal Server Error"]}],[{"i":"makedir","l":"/makedir"},{"l":"Route Details"},{"i":"post-makedir","l":"POST /makedir","p":["Creates a folder in directory specified."]},{"l":"Request","p":["Method: HTTP POST","Request body:"]},{"l":"Response","p":["Status Code","Description","201","Success","401","Unauthorized. Requires API key or JWT with permission.","403","Forbidden. User does not have permission.","429","Too Many Requests","500","Internal Server Error"]}],[{"i":"move","l":"/move"},{"l":"Route Details"},{"i":"post-move","l":"POST /move","p":["Moves files and/or folders into a given directory."]},{"l":"Request","p":["Method: HTTP POST","Request body: JSON object with pathToFiles, string array of any length with path of files to move."]},{"l":"Response","p":["Status Code","Description","200","Success. May contain error message if any files failed.","401","Unauthorized. Requires API key or JWT with permission.","403","Forbidden. User does not have permission.","429","Too Many Requests","500","Internal Server Error","Example 200 partial success response body:"]}],[{"i":"copy","l":"/copy"},{"l":"Route Details"},{"i":"post-copy","l":"POST /copy","p":["Copy files and/or folders into a given directory."]},{"l":"Request","p":["Method: HTTP POST","Request body: JSON object with pathToFiles, string array of any length with path of files to copy."]},{"l":"Response","p":["Status Code","Description","200","Success. May contain error message if any files failed.","401","Unauthorized. Requires API key or JWT with permission.","403","Forbidden. User does not have permission.","429","Too Many Requests","500","Internal Server Error","Example 200 partial success response body:"]}],[{"i":"rename","l":"/rename"},{"l":"Route Details"},{"i":"patch-rename","l":"PATCH /rename","p":["Renames a file specified."]},{"l":"Request","p":["Method: HTTP PATCH","Request body:"]},{"l":"Response","p":["Status Code","Description","200","Success. May contain error message if any files failed.","401","Unauthorized. Requires API key or JWT with permission.","403","Forbidden. User does not have permission.","404","File/directory not found.","429","Too Many Requests","500","Internal Server Error"]}],[{"l":"Authorization","p":["Authorization can be done in two ways:","Simple: API keys provided in config.yaml, which gives unlimited permission when used as a request header X-API-Key. JSON web tokens (JWT) can also be generated with /authorize/get, returning a response with a Set-Cookie header containing the token, and can be sent to validate authorized requests.","Complex: More complex user accounts with ranks and permissions, allowing server admins to assign specific permissions to each user. User data is stored in a local SQLite database. This form of authorization can be enabled in config.yaml with the database option.","Advanced auth is disabled by default in config.yaml."]},{"l":"Advanced Auth","p":["User JWTs have the following body:","The default rank upon registration is set at 0.","Admin rank is specified in config.yaml, equal or above which users are considered admins. Admins have unlimited access to state-changing server interactions, and can see/modify user permissions."]}],[{"i":"authorizeget","l":"/authorize/get"},{"l":"Route Details"},{"i":"post-authorizeget","l":"POST /authorize/get","p":["Get and send JWT from body provided."]},{"l":"Request","p":["Method: HTTP POST","Request body: X-API-Key: api-key-provided-in-config.yaml header. Any request body is used for generating JWT."]},{"l":"Response","p":["Status Code","Description","200","Success. Contains Set-Cookie header with token.","401","Unauthorized. Missing or wrong API key.","429","Too Many Requests"]}],[{"i":"authorizelogout","l":"/authorize/logout"},{"l":"Route Details"},{"i":"get-authorizelogout","l":"GET /authorize/logout","p":["Delete any token cookie in request, logging out the client."]},{"l":"Request","p":["Method: HTTP GET"]},{"l":"Response","p":["Status Code","Description","200","Success. Contains Set-Cookie header to clear the token cookie.","429","Too Many Requests"]}],[{"l":"Advanced Auth","p":["These routes are only available if the database: enabled option is set to true in the config.yaml file."]}],[{"i":"authorizelogin","l":"/authorize/login"},{"l":"Route Details"},{"i":"post-authorizelogin","l":"POST /authorize/login","p":["Advanced version of /authorize/get that doesn't allow API key logins for security. Get and send JWT from user data."]},{"l":"Request","p":["Method: HTTP POST","Request body:"]},{"l":"Response","p":["Status Code","Description","200","Success. Contains Set-Cookie header with token.","401","Unauthorized. Wrong username or password.","404","Not Found. Database setting is disabled in config.yaml.","429","Too Many Requests"]}],[{"i":"authorizeregister","l":"/authorize/register"},{"l":"Route Details"},{"i":"post-authorizeregister","l":"POST /authorize/register","p":["Get JWT from user data and registers the user."]},{"l":"Request","p":["Method: HTTP POST","Request body:"]},{"l":"Response","p":["Status Code","Description","200","Success. Contains Set-Cookie header with token.","400","Restricted username. Set in config.yaml.","404","Not Found. Database setting is disabled in config.yaml.","409","Username has been taken.","429","Too Many Requests"]}],[{"i":"authorizedelete","l":"/authorize/delete"},{"l":"Route Details"},{"i":"delete-authorizedelete","l":"DELETE /authorize/delete","p":["Deletes user data from database, and removes token cookie from client."]},{"l":"Request","p":["Method: HTTP DELETE","Request body:"]},{"l":"Response","p":["Status Code","Description","200","Success. Contains Set-Cookie header to clear the token cookie.","401","Unauthorized. Wrong username or password.","404","Not Found. Database setting is disabled in config.yaml.","429","Too Many Requests","500","Internal Server Error"]}],[{"l":"Advanced Auth Admin Controls","p":["These routes are only available if the database: enabled option is set to true in the config.yaml file."]}],[{"l":"Query users"},{"l":"Route Details"},{"i":"get-authorizeuser","l":"GET /authorize/user","p":["Searches for users matching a query string, or index all if none provided."]},{"l":"Request","p":["Method: HTTP GET","Request query parameter user(optional):","Search string to find users by username. Leave out to index entire database."]},{"l":"Response","p":["Status Code","Description","200","Success. Array of matching users and their data.","401","Unauthorized. Requires API key or JWT cookie.","403","Forbidden. User does not have permission.","404","Not Found. Database setting is disabled in config.yaml.","429","Too Many Requests","500","Internal Server Error","Example 200 response body:"]}],[{"l":"Modify user data"},{"l":"Route Details"},{"i":"patch-authorizeuserusernamemodify","l":"PATCH /authorize/user/{username}/modify","p":["Modify user data of username provide."]},{"l":"Request","p":["Method: HTTP PATCH","Path parameter {username}: Exact username to modify data of","Request body: JSON containing fields to update. Cannot contain fields for password, username, createdAt, or _ id. Permissions will overwrite existing, so the entire permissions object should be provided including the existing data."]},{"l":"Response","p":["Status Code","Description","200","Success. Array of matching users and their data.","401","Unauthorized. Requires API key or JWT cookie.","403","Forbidden. User does not have permission. Applies when modifying a user of higher rank, or attempting to increase own rank.","404","Not Found. Database setting is disabled in config.yaml, or user specified not found.","429","Too Many Requests","500","Internal Server Error"]}]]