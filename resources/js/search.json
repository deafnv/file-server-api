[[{"l":"File Server","p":["Basic file server with API routes for CRUD.","Authorization for a single admin api key/password, giving permissions for state-changing interactions like creating new folders, or uploading files. Unauthorized users will still be a able to view and download the files.","All file paths used in requests are relative to ROOT_DIRECTORY_PATH, i.e., /server/files/image.jpg not /home/deafnv/server/files/image.jpg.","This file server is used in the demo in this repository."]},{"l":"Usage","p":["Clone and run npm install and npm start. See config-template.yaml for details on the config file format. The server should start by default on port 80, and 443 if configured with HTTPS."]},{"l":"Routes","p":["All routes causing state changes in the server require authorization by either a token cookie, or an API key. See Authorization Routes for details."]}],[{"l":"Configuration"},{"l":"Config File Setup","p":["Make a copy of config-template.yaml and rename it config.yaml, then populate it as you see fit."]},{"l":"Template"}],[{"l":"Miscellaneous"},{"l":"Listening to server updates","p":["The server will broadcast websocket events upon successful execution of any of the authorized state changing routes, with the event name being the relative path (relative to the directory path provided in config.yaml) of the directory affected by the update.","For example, a delete request made on /home/deafnv/server-files/dir-1 will broadcast a /dir-1 event with payload DELETE. Client side re-polling of /list can be done by listening for these events.","Example implementation in Next.js:"]}],[{"l":"List of Routes"},{"l":"Non-authorized routes","p":["/list: Lists the file in a given directory. Lists root directory if unspecified.","/retrieve: Retrieves file specified. Supports video streaming.","/filetree: Returns a JSON representation of any subdirectories. Only lists directories, files are omitted."]},{"l":"Authorized routes","p":["/upload: Uploads files into directory provided.","/delete: Deletes files specified.","/makedir: Creates a folder in directory specified.","/move: Moves files and/or folders into a given directory.","/copy: Copy files and/or folders into a given directory.","/rename: Renames a file specified."]},{"l":"Authorization routes","p":["/authorize/get: Get JWT from body provided.","/authorize/delete: Delete any token cookie in request."]}],[{"i":"list","l":"/list"},{"l":"Route Details"},{"i":"get-listdirectory_path","l":"GET /list/{directory_path}","p":["Lists the file in a given directory. Lists root directory if unspecified."]},{"l":"Request","p":["Method: HTTP GET","Path parameter {directory_path}: /path/to/directory"]},{"l":"Response","p":["Array of variable length, with JSON object for each item in directory. Size in bytes."]}],[{"i":"retrieve","l":"/retrieve"},{"l":"Route Details"},{"i":"get-retrievefile_path","l":"GET /retrieve/{file_path}","p":["Retrieves file specified. Supports video streaming."]},{"l":"Request","p":["Method: HTTP GET","Path parameter {file_path}: /path/to/file","Query parameter: optional download=true can be used to directly download the file specified."]},{"l":"Response","p":["Varies depending on file requested. Specified by Content-Type header in the response."]}],[{"i":"filetree","l":"/filetree"},{"l":"Route Details"},{"i":"get-filetree","l":"GET /filetree","p":["Returns a JSON representation of any subdirectories. Only lists directories, files are omitted."]},{"l":"Request","p":["Method: HTTP GET"]},{"l":"Response"}],[{"i":"upload","l":"/upload"},{"l":"Route Details"},{"i":"post-uploaddirectory_path","l":"POST /upload/{directory_path}","p":["Uploads files into directory provided."]},{"l":"Request","p":["Method: HTTP POST","Path parameter {directory_path}: /path/to/directory","Request body: Content-Type: multipart/form-data"]},{"l":"Response","p":["Status code 200."]}],[{"i":"delete","l":"/delete"},{"l":"Route Details"},{"i":"delete-delete","l":"DELETE /delete","p":["Deletes files specified."]},{"l":"Request","p":["Method: HTTP DELETE","Request body: JSON object with pathToFiles, string array of any length with path of files to delete."]},{"l":"Response","p":["Status code 200."]}],[{"i":"makedir","l":"/makedir"},{"l":"Route Details"},{"i":"post-makedir","l":"POST /makedir","p":["Creates a folder in directory specified."]},{"l":"Request","p":["Method: HTTP POST","Request body:"]},{"l":"Response","p":["Status code 201."]}],[{"i":"move","l":"/move"},{"l":"Route Details"},{"i":"post-move","l":"POST /move","p":["Moves files and/or folders into a given directory."]},{"l":"Request","p":["Method: HTTP POST","Request body: JSON object with pathToFiles, string array of any length with path of files to move."]},{"l":"Response","p":["Status code 200."]}],[{"i":"copy","l":"/copy"},{"l":"Route Details"},{"i":"post-copy","l":"POST /copy","p":["Copy files and/or folders into a given directory."]},{"l":"Request","p":["Method: HTTP POST","Request body: JSON object with pathToFiles, string array of any length with path of files to copy."]},{"l":"Response","p":["Status code 200."]}],[{"i":"rename","l":"/rename"},{"l":"Route Details"},{"i":"patch-rename","l":"PATCH /rename","p":["Renames a file specified."]},{"l":"Request","p":["Method: HTTP PATCH","Request body:"]},{"l":"Response","p":["Status code 200."]}],[{"l":"Authorization","p":["These routes are intended for basic authorization to allow access to the authorized routes on the server. As of now, only one password/API key defined in config.yaml is supported, and functions as an API key used directly in the header as X-API-Key. Using these authorization routes, a cookie can be obtained which will allow subsequent access without the key, as shown in the demo."]}],[{"i":"authorizeget","l":"/authorize/get"},{"l":"Route Details"},{"i":"post-authorizeget","l":"POST /authorize/get","p":["Get JWT from body provided."]},{"l":"Request","p":["Method: HTTP POST","Request body: X-API-Key: api-key-provided-in-config.yaml header. Any request body is used for generating JWT."]},{"l":"Response","p":["Status code 200 with Set-Cookie: token= header containing token."]}],[{"i":"authorizedelete","l":"/authorize/delete"},{"l":"Route Details"},{"i":"get-authorizedelete","l":"GET /authorize/delete","p":["Delete any token cookie in request."]},{"l":"Request","p":["Method: HTTP GET"]},{"l":"Response","p":["Status code 200 with Set-Cookie header to clear the token cookie."]}]]